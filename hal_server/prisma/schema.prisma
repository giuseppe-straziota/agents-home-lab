generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model agent {
  id          Int          @id(map: "agent_pk") @default(autoincrement())
  name        String       @unique(map: "agent_unique") @db.VarChar(255)
  active      Boolean      @default(false)
  uuid        String       @unique(map: "agent_unique_uuid") @db.VarChar
  deleted     Boolean?     @default(false)
  description String?      @db.VarChar
  agent_llm   agent_llm[]
  agent_tool  agent_tool[]
}

model agent_llm {
  id_agent Int
  id_llm   Int
  config   Json    @db.Json
  uuid     String? @db.VarChar
  agent    agent   @relation(fields: [id_agent], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "agent_llm_agent_fk")
  llm      llm     @relation(fields: [id_llm], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "agent_llm_llm_fk")

  @@unique([id_agent, id_llm], map: "agent_llm_unique")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model agent_tool {
  config   Json   @db.Json
  id_agent Int
  id_tool  Int
  uuid     String @db.VarChar
  agent    agent  @relation(fields: [id_agent], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "agent_tool_agent_fk")
  tool     tool   @relation(fields: [id_tool], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "agent_tool_tool_fk")

  @@unique([id_agent, id_tool, uuid], map: "agent_tool_unique")
}

model category {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(100)
  description String?
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)
  item        item[]
}

model configuration {
  name        String  @id(map: "newtable_pk") @db.VarChar
  value       String? @db.VarChar
  type        String  @db.VarChar
  description String? @db.VarChar
}

model item {
  id              Int       @id @default(autoincrement())
  pantry_id       Int?      @default(1)
  category_id     Int?      @default(1)
  name            String    @unique(map: "unique_name") @db.VarChar(255)
  quantity        Decimal?  @db.Decimal
  unit            String?   @db.VarChar(50)
  expiration_date DateTime? @default(dbgenerated("(now() + '15 days'::interval)")) @db.Date
  created_at      DateTime? @default(now()) @db.Timestamp(6)
  updated_at      DateTime? @default(now()) @db.Timestamp(6)
  category        category? @relation(fields: [category_id], references: [id], onUpdate: NoAction)
  pantry          pantry?   @relation(fields: [pantry_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([name, pantry_id, category_id], map: "item_unique")
}

model llm {
  id        Int         @id(map: "llm_pk") @default(autoincrement())
  name      String      @unique(map: "llm_unique") @db.VarChar(255)
  template  Json?       @db.Json
  uuid      String      @unique(map: "llm_unique_uuid") @db.VarChar
  label     String?     @db.VarChar
  agent_llm agent_llm[]
}

model pantry {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(255)
  location   String?   @db.VarChar(255)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  item       item[]
}

model tool {
  id         Int          @id(map: "tool_pk") @default(autoincrement())
  name       String       @unique(map: "tool_unique") @db.VarChar(255)
  template   Json?        @db.Json
  label      String?      @db.VarChar
  agent_tool agent_tool[]
}
